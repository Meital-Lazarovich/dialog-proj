{"version":3,"sources":["components/DialogBox.js","views/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["DialogBox","props","useState","isVisable","setIsVisable","handleKeydown","ev","key","useEffect","document","addEventListener","removeEventListener","ReactDOM","createPortal","className","style","display","role","children","getElementById","MainContent","state","isModalOpen","openDialog","setState","this","onClick","Component","App","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAkCeA,EA/BG,SAACC,GAAW,IAAD,EACSC,oBAAS,GADlB,mBAClBC,EADkB,KACPC,EADO,KAGnBC,EAAgB,SAACC,GACJ,WAAXA,EAAGC,KACHH,GAAa,IAWrB,OAPAI,qBAAU,WAEN,OADAC,SAASC,iBAAiB,UAAWL,GAC9B,WACHI,SAASE,oBAAoB,UAAWN,OAIzCO,IAASC,aACZ,oCACKV,GAAa,oCACd,yBAAKW,UAAU,mBACf,4BAAQC,MAAO,CAAEC,QAAS,UACtB,yBAAKC,KAAK,YACLhB,EAAMiB,aAKnBT,SAASU,eAAe,uBCHjBC,E,2MAvBXC,MAAQ,CACJC,aAAa,G,EAGjBC,WAAa,WACT,EAAKC,SAAS,CAAEF,aAAa,K,wEAGvB,IACEA,EAAgBG,KAAKJ,MAArBC,YACR,OACI,6BAAUR,UAAU,gBAChB,kDACA,4BAAQY,QAASD,KAAKF,YAAtB,eACCD,GACD,kBAAC,EAAD,KACI,0D,GAjBMK,aCQXC,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCMce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNrB,IAASsB,OAAO,kBAAC,EAAD,MAASzB,SAASU,eAAe,mBD8H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26cc9232.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst DialogBox = (props) => {\r\n    const [isVisable, setIsVisable] = useState(true);\r\n\r\n    const handleKeydown = (ev) => {\r\n        if (ev.key === 'Escape') {\r\n            setIsVisable(false)\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", handleKeydown);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleKeydown);\r\n        };\r\n    });\r\n\r\n    return ReactDOM.createPortal(\r\n        <>\r\n            {isVisable && <>\r\n            <div className=\"visual-overlay\"></div>\r\n            <dialog style={{ display: 'block' }}>\r\n                <div role=\"document\">\r\n                    {props.children}\r\n                </div>\r\n            </dialog>\r\n            </>}\r\n        </>,\r\n        document.getElementById('dialogPlaceholder')\r\n    )\r\n}\r\n\r\nexport default DialogBox;\r\n","import React, { Component } from 'react';\r\nimport DialogBox from '../components/DialogBox'\r\n\r\nclass MainContent extends Component {\r\n    state = {\r\n        isModalOpen: false\r\n    }\r\n\r\n    openDialog = () => {\r\n        this.setState({ isModalOpen: true })\r\n    }\r\n\r\n    render() {\r\n        const { isModalOpen } = this.state\r\n        return (\r\n            < section className=\"main-content\" >\r\n                <h1>Welcome to the app</h1>\r\n                <button onClick={this.openDialog}>Open dialog</button>\r\n                {isModalOpen && \r\n                <DialogBox>\r\n                    <h2>I am inside the slot</h2>\r\n                </DialogBox>}\r\n            </section >\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\nimport MainContent from './views/MainContent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContent></MainContent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('sectionContent'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}